use bitcoin::{
    block::Header,
    blockdata::block::Block,
    consensus::encode::{deserialize_hex, serialize_hex},
    hashes::Hash,
    merkle_tree::PartialMerkleTree,
    Transaction, Txid, WitnessCommitment, WitnessMerkleNode, Wtxid,
};
use serde::{de::Error, Deserialize, Deserializer, Serialize, Serializer};
use strata_primitives::buf::Buf32;
use strata_state::{
    bridge_state::DepositsTable, chain_state::Chainstate, l1::HeaderVerificationState,
};

#[derive(Debug, Clone)]
pub struct InclusionProof(pub PartialMerkleTree);

/// Implement `Serialize` for `PartialMerkleTree` using hex encoding.
impl Serialize for InclusionProof {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: Serializer,
    {
        serializer.serialize_str(&serialize_hex(&self.0))
    }
}

/// Implement `Deserialize` for `PartialMerkleTree` using hex decoding.
impl<'de> Deserialize<'de> for InclusionProof {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: Deserializer<'de>,
    {
        Ok(InclusionProof(
            deserialize_hex(&String::deserialize(deserializer)?).map_err(D::Error::custom)?,
        ))
    }
}

/// Parameters for Bridge Proof operations as a tuple.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BridgeProofPublicParams {
    pub deposit_txid: [u8; 32],
    pub withdrawal_fulfillment_txid: [u8; 32],
}

pub trait WtxidToTxid {
    fn to_txid(&self) -> Txid;
}

impl WtxidToTxid for Wtxid {
    fn to_txid(&self) -> Txid {
        Txid::from_byte_array(self.to_byte_array())
    }
}

pub trait WithInclusionProof {
    fn with_inclusion_proof(&self, block: &Block) -> TransactionWithInclusionProof;
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TransactionWithInclusionProof {
    // Transaction and PMT for transaction (and coinbase) inclusion proof
    pub tx: (Transaction, InclusionProof),

    // Coinbase transaction and PMT for witness inclusion proof
    pub witness: Option<(Transaction, InclusionProof)>,
}

impl WithInclusionProof for Transaction {
    fn with_inclusion_proof(&self, block: &Block) -> TransactionWithInclusionProof {
        let (txids, wtxids): (Vec<_>, Vec<_>) = block
            .txdata
            .iter()
            .map(|tx| {
                (
                    tx.compute_txid(),
                    if tx.is_coinbase() {
                        Txid::all_zeros()
                    } else {
                        tx.compute_wtxid().to_txid()
                    },
                )
            })
            .unzip();

        let txid = self.compute_txid();
        let wtxid = self.compute_wtxid().to_txid();

        let (incl_txids, witness) = if txid == wtxid || self.is_coinbase() {
            // Non-Segwit or coinbase
            (vec![txid], None)
        } else {
            // Segwit
            let coinbase_tx = block.txdata[0].clone();
            let coinbase_txid = coinbase_tx.compute_txid();
            (
                vec![coinbase_txid, txid],
                Some((
                    coinbase_tx,
                    InclusionProof(PartialMerkleTree::from_txids(
                        &wtxids,
                        &wtxids.iter().map(|&id| id == wtxid).collect::<Vec<_>>(),
                    )),
                )),
            )
        };

        TransactionWithInclusionProof {
            tx: (
                self.clone(),
                InclusionProof(PartialMerkleTree::from_txids(
                    &txids,
                    &txids
                        .iter()
                        .map(|id| incl_txids.contains(id))
                        .collect::<Vec<_>>(),
                )),
            ),
            witness,
        }
    }
}

impl TransactionWithInclusionProof {
    pub fn verify(&self, header: &Header) -> Result<(), Box<dyn std::error::Error>> {
        let (tx, InclusionProof(tx_pmt)) = &self.tx;

        let (txid, wtxid) = (tx.compute_txid(), tx.compute_wtxid().to_txid());
        let (mut txids, mut tx_indexes) = (vec![], vec![]);

        let merkle_root = tx_pmt.extract_matches(&mut txids, &mut tx_indexes)?;
        if merkle_root != header.merkle_root || !txids.contains(&txid) {
            return Err("invalid tx inclusion proof".into());
        }

        if txid != wtxid && !tx.is_coinbase() {
            let (coinbase_tx, InclusionProof(witness_pmt)) = self
                .witness
                .as_ref()
                .ok_or("witness: segwit tx requires witness proof")?;

            let coinbase_txid = coinbase_tx.compute_txid();
            if !coinbase_tx.is_coinbase() || !txids.contains(&coinbase_txid) {
                return Err("witness: invalid coinbase_tx inclusion proof".into());
            }

            // extract witness commitment from coinbase tx
            const MAGIC: [u8; 6] = [0x6a, 0x24, 0xaa, 0x21, 0xa9, 0xed];
            let coinbase_witness_commitment = coinbase_tx
                .output
                .iter()
                .rev()
                .find_map(|txout| txout.script_pubkey.as_bytes().strip_prefix(&MAGIC))
                .map(|data| WitnessCommitment::from_slice(&data[..32]).unwrap())
                .ok_or("witness: no commitment in coinbase_tx")?;

            let witness_reserved_value: [u8; 32] = coinbase_tx.input[0]
                .witness
                .nth(0)
                .ok_or("witness: no reserved value in witness")?
                .try_into()?;

            let (mut wtxids, mut windexes) = (vec![], vec![]);
            let root = witness_pmt.extract_matches(&mut wtxids, &mut windexes)?;
            let witness_root = WitnessMerkleNode::from_raw_hash(root.to_raw_hash());
            let witness_commitment =
                Block::compute_witness_commitment(&witness_root, &witness_reserved_value);

            if witness_commitment != coinbase_witness_commitment || !wtxids.contains(&wtxid) {
                return Err("witness: invalid witness inclusion proof".into());
            }
        }

        Ok(())
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BridgeProofInput {
    /// headers after last verified l1 block
    pub headers: Vec<Header>,

    /// Deposit Txid
    pub deposit_txid: [u8; 32],

    /// Block height of checkpoint tx, and it's inclusion proof
    pub checkpoint: (u32, TransactionWithInclusionProof),

    /// Block height of bridge_out tx, and it's inclusion proof
    pub bridge_out: (u32, TransactionWithInclusionProof),
}

#[derive(borsh::BorshSerialize, borsh::BorshDeserialize, Clone)]
pub struct StrataBridgeState {
    // ChainState for state root verification
    pub chain_state: Chainstate,

    /// Header verification state until last verified l1 block
    pub initial_header_state: HeaderVerificationState,
}

impl StrataBridgeState {
    pub fn compute_state_root(&self) -> Buf32 {
        self.chain_state.compute_state_root()
    }

    pub fn deposits_table(&self) -> &DepositsTable {
        self.chain_state.deposits_table()
    }
}

#[cfg(test)]
mod tests {
    use std::{fs, path::Path, str::FromStr};

    use bitcoin::{Block, Txid};
    use strata_primitives::params::RollupParams;

    use super::*;
    use crate::process_bridge_proof;

    #[test]
    fn test_tx_inclusion_proofs() {
        let block = mock_block();

        for i in 0..block.txdata.len() {
            let tx = &block.txdata[i];
            let tx = tx.with_inclusion_proof(&block);
            if let Err(err) = tx.verify(&block.header) {
                panic!("{}", err);
            }
        }
    }

    fn mock_block() -> Block {
        let raw_block = "";
        bitcoin::consensus::deserialize(&hex::decode(raw_block).unwrap()).unwrap()
    }

    mod data {
        use std::{fs, path::Path};

        use bitcoin::Transaction;
        use borsh::BorshDeserialize;
        use strata_l1tx::envelope::parser::parse_envelope_payloads;
        use strata_primitives::{buf::Buf32, params::RollupParams};
        use strata_state::{
            batch::{BatchCheckpoint, SignedBatchCheckpoint},
            chain_state::Chainstate,
            l1::{HeaderVerificationState, L1BlockId, TimestampStore},
        };

        pub fn chain_state() -> Chainstate {
            let data = [
                104, 0, 0, 0, 0, 0, 0, 0, 224, 24, 18, 63, 98, 96, 114, 144, 86, 110, 175, 224,
                167, 99, 87, 17, 219, 8, 76, 25, 43, 223, 116, 130, 196, 95, 129, 138, 40, 246,
                121, 5, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 72, 251, 49, 122, 155, 93,
                94, 17, 59, 54, 48, 136, 99, 23, 226, 75, 107, 228, 221, 195, 78, 178, 66, 93, 88,
                186, 242, 13, 234, 138, 32, 13, 80, 0, 0, 0, 0, 0, 0, 32, 84, 106, 80, 130, 95, 60,
                150, 50, 135, 116, 39, 200, 141, 34, 177, 140, 157, 72, 217, 108, 171, 122, 188,
                161, 52, 252, 140, 204, 109, 107, 4, 80, 125, 48, 8, 51, 209, 216, 149, 225, 235,
                250, 207, 212, 46, 128, 175, 243, 169, 114, 37, 42, 126, 155, 116, 221, 253, 207,
                234, 193, 242, 179, 117, 52, 103, 227, 165, 103, 255, 255, 127, 32, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 158, 3, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 36, 193, 76, 54, 89, 78, 224, 169,
                209, 180, 45, 108, 184, 79, 174, 11, 113, 117, 119, 165, 51, 72, 10, 16, 80, 147,
                214, 88, 166, 180, 245, 4, 80, 0, 0, 0, 0, 0, 0, 32, 72, 251, 49, 122, 155, 93, 94,
                17, 59, 54, 48, 136, 99, 23, 226, 75, 107, 228, 221, 195, 78, 178, 66, 93, 88, 186,
                242, 13, 234, 138, 32, 13, 10, 97, 189, 76, 28, 115, 234, 215, 70, 237, 166, 40,
                65, 147, 108, 27, 139, 160, 218, 92, 38, 103, 71, 62, 40, 113, 23, 88, 104, 211,
                237, 248, 103, 227, 165, 103, 255, 255, 127, 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 76, 204, 221, 114, 80, 247, 208, 191, 62, 220, 35, 150, 108, 151,
                177, 196, 162, 162, 168, 206, 192, 66, 12, 132, 42, 103, 92, 127, 95, 77, 155, 44,
                80, 0, 0, 0, 0, 0, 0, 32, 36, 193, 76, 54, 89, 78, 224, 169, 209, 180, 45, 108,
                184, 79, 174, 11, 113, 117, 119, 165, 51, 72, 10, 16, 80, 147, 214, 88, 166, 180,
                245, 4, 248, 5, 47, 84, 114, 144, 20, 67, 175, 3, 169, 115, 49, 136, 76, 82, 73,
                141, 108, 20, 145, 50, 77, 102, 250, 160, 200, 138, 206, 20, 75, 140, 103, 227,
                165, 103, 255, 255, 127, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210,
                237, 130, 96, 238, 87, 67, 81, 99, 206, 172, 127, 250, 113, 143, 54, 40, 104, 228,
                173, 200, 109, 228, 64, 135, 147, 171, 42, 172, 222, 190, 50, 80, 0, 0, 0, 0, 0, 0,
                32, 76, 204, 221, 114, 80, 247, 208, 191, 62, 220, 35, 150, 108, 151, 177, 196,
                162, 162, 168, 206, 192, 66, 12, 132, 42, 103, 92, 127, 95, 77, 155, 44, 158, 83,
                111, 46, 238, 162, 79, 236, 126, 180, 215, 168, 84, 20, 226, 111, 253, 209, 73, 31,
                245, 23, 111, 243, 152, 153, 205, 43, 139, 69, 208, 183, 107, 227, 165, 103, 255,
                255, 127, 32, 0, 0, 0, 0, 108, 47, 79, 239, 83, 111, 98, 58, 109, 192, 248, 25, 11,
                197, 94, 254, 0, 151, 148, 157, 160, 239, 130, 7, 17, 88, 230, 94, 249, 5, 14, 2,
                0, 0, 0, 0, 0, 0, 0, 0, 14, 121, 70, 100, 4, 39, 74, 223, 179, 234, 132, 92, 17,
                220, 75, 63, 172, 107, 229, 60, 66, 91, 166, 222, 148, 33, 171, 130, 52, 14, 28,
                20, 80, 0, 0, 0, 0, 0, 0, 32, 210, 237, 130, 96, 238, 87, 67, 81, 99, 206, 172,
                127, 250, 113, 143, 54, 40, 104, 228, 173, 200, 109, 228, 64, 135, 147, 171, 42,
                172, 222, 190, 50, 72, 194, 40, 168, 123, 37, 84, 200, 176, 43, 239, 102, 72, 31,
                251, 111, 153, 38, 191, 13, 216, 150, 230, 12, 177, 136, 9, 0, 235, 4, 69, 249,
                107, 227, 165, 103, 255, 255, 127, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 237, 159, 30, 101, 7, 78, 199, 11, 92, 68, 206, 122, 213, 239, 49, 15, 12, 175,
                116, 177, 210, 158, 235, 38, 248, 97, 186, 211, 107, 51, 40, 86, 80, 0, 0, 0, 0, 0,
                0, 32, 14, 121, 70, 100, 4, 39, 74, 223, 179, 234, 132, 92, 17, 220, 75, 63, 172,
                107, 229, 60, 66, 91, 166, 222, 148, 33, 171, 130, 52, 14, 28, 20, 211, 179, 39, 9,
                95, 74, 112, 110, 77, 33, 158, 185, 234, 30, 237, 249, 49, 128, 177, 241, 64, 127,
                82, 169, 118, 103, 177, 255, 233, 143, 117, 0, 107, 227, 165, 103, 255, 255, 127,
                32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 134, 179, 97, 106, 49, 2,
                111, 220, 130, 140, 157, 154, 205, 193, 34, 31, 159, 52, 217, 6, 32, 140, 106, 228,
                11, 64, 254, 207, 126, 75, 7, 80, 0, 0, 0, 0, 0, 0, 32, 237, 159, 30, 101, 7, 78,
                199, 11, 92, 68, 206, 122, 213, 239, 49, 15, 12, 175, 116, 177, 210, 158, 235, 38,
                248, 97, 186, 211, 107, 51, 40, 86, 102, 101, 216, 250, 151, 132, 132, 119, 210,
                194, 99, 27, 45, 236, 130, 43, 40, 250, 227, 139, 90, 245, 22, 248, 240, 211, 134,
                130, 110, 248, 34, 42, 107, 227, 165, 103, 255, 255, 127, 32, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 32, 0, 0, 0, 222, 191, 116, 34, 222, 185, 168, 67, 65, 218, 140,
                214, 79, 207, 195, 134, 116, 4, 179, 3, 146, 13, 197, 77, 63, 132, 68, 228, 140,
                22, 141, 67, 0, 0, 0, 0, 86, 232, 31, 23, 27, 204, 85, 166, 255, 131, 69, 230, 146,
                192, 248, 110, 91, 72, 224, 27, 153, 108, 173, 192, 1, 98, 47, 181, 227, 99, 180,
                33, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 141, 134, 131, 78, 111, 219, 69, 186,
                107, 127, 253, 6, 122, 39, 185, 225, 214, 119, 120, 4, 117, 129, 215, 239, 117,
                126, 217, 224, 250, 71, 64, 0, 214, 120, 170, 42, 213, 228, 242, 23, 64, 37, 170,
                127, 119, 205, 67, 238, 102, 44, 205, 148, 73, 153, 130, 208, 195, 34, 167, 61, 31,
                254, 205, 121, 1, 0, 0, 0, 10, 187, 0, 184, 177, 126, 39, 152, 221, 235, 208, 204,
                187, 133, 139, 111, 98, 74, 31, 247, 217, 62, 193, 91, 170, 138, 123, 227, 241, 54,
                71, 77, 23, 92, 178, 109, 239, 0, 234, 239, 64, 101, 12, 157, 97, 27, 230, 117, 15,
                181, 119, 161, 12, 225, 248, 248, 94, 43, 40, 195, 70, 219, 137, 246, 2, 0, 0, 0,
                42, 75, 116, 61, 194, 57, 58, 110, 224, 56, 53, 10, 110, 243, 165, 87, 65, 230,
                199, 138, 198, 73, 20, 120, 216, 50, 244, 226, 162, 58, 166, 190, 1, 164, 160, 232,
                209, 174, 75, 16, 184, 220, 35, 13, 92, 51, 14, 72, 148, 5, 135, 153, 139, 148,
                247, 106, 94, 46, 115, 209, 68, 77, 74, 251, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
                66, 211, 137, 111, 241, 145, 19, 137, 194, 248, 160, 189, 109, 76, 196, 123, 128,
                208, 36, 29, 205, 250, 233, 42, 255, 91, 201, 234, 176, 98, 226, 254, 0, 0, 0, 0,
                3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0,
                0, 0, 2, 1, 0, 0, 0, 33, 0, 0, 0, 4, 148, 178, 95, 235, 57, 15, 190, 250, 221, 104,
                247, 193, 238, 231, 224, 196, 117, 254, 160, 209, 253, 222, 89, 186, 102, 171, 108,
                168, 25, 252, 228, 124, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 210, 69, 15, 0, 0,
                0, 0, 0, 1, 0, 0, 0, 58, 133, 171, 249, 247, 121, 62, 210, 20, 64, 217, 47, 20,
                248, 152, 101, 183, 136, 119, 117, 128, 164, 51, 178, 38, 73, 170, 167, 81, 61,
                182, 106, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 202, 154,
                59, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            ];
            borsh::from_slice::<Chainstate>(&data).unwrap()
        }

        pub fn header_verification_state() -> HeaderVerificationState {
            let mut timestamps = [
                1738924903, 1738924903, 1738924903, 1738924903, 1738924907, 1738924907, 1738924907,
                1738924907, 1738924911, 1738924899, 1738924899,
            ];
            timestamps.sort();

            HeaderVerificationState {
                last_verified_block_num: 932,
                last_verified_block_hash: L1BlockId::from(
                    Buf32::try_from_slice(
                        &hex::decode(
                            "e2c06d4ff03aadd3ee68c446743bb9ee55a816af8a39b6e393b0bca74d60b753",
                        )
                        .unwrap(),
                    )
                    .unwrap(),
                ),
                next_block_target: 545259519,
                interval_start_timestamp: 1296688602,
                total_accumulated_pow: 0,
                last_11_blocks_timestamps: TimestampStore::new_with_head(timestamps, 9),
            }
        }

        pub fn checkpoint_last_verified_l1_height(tx: &Transaction) -> Option<u32> {
            let manifest_dir = env!("CARGO_MANIFEST_DIR");
            let json_path = Path::new(manifest_dir).join("../../../test-data/rollup_params.json");
            let json = fs::read_to_string(json_path).expect("rollup params file not found");
            let rollup_params: RollupParams = serde_json::from_str(&json).unwrap();
            if let Some(script) = tx.input[0].witness.tapscript() {
                if let Ok(payloads) = parse_envelope_payloads(&script.into(), &rollup_params) {
                    if payloads.is_empty() {
                        return None;
                    }
                    if let Ok(signed_batch_checkpoint) =
                        borsh::from_slice::<SignedBatchCheckpoint>(payloads[0].data())
                    {
                        let batch_checkpoint: BatchCheckpoint = signed_batch_checkpoint.into();
                        return Some(batch_checkpoint.batch_info().l1_range.1 as u32);
                    }
                }
            }
            None
        }
    }

    #[test]
    fn test_dump_proof_inputs() {
        let blocks_bytes = include_bytes!("../../../../test-data/blocks.bin");
        let blocks: Vec<Block> =
            bincode::deserialize(blocks_bytes).expect("failed Block deserialization");

        let manifest_dir = env!("CARGO_MANIFEST_DIR");
        let json_path = Path::new(manifest_dir).join("../../../test-data/rollup_params.json");
        let json = fs::read_to_string(json_path).expect("rollup params file not found");
        let rollup_params: RollupParams = serde_json::from_str(&json).unwrap();
        rollup_params.check_well_formed().unwrap();

        let initial_header_state = data::header_verification_state();

        let deposit_txid =
            Txid::from_str("fee262b0eac95bff2ae9facd1d24d0807bc44c6dbda0f8c2891391f16f89d342")
                .unwrap();

        let bridge_out_txid =
            Txid::from_str("44bd26ee0b9f1edd768dc8b25d1c7cd8fd231aaeccb4805a4a850ae17cb5c575")
                .unwrap();
        let (bridge_out_height, bridge_out_tx) = blocks
            .iter()
            .find_map(|block| {
                if let Some(tx) = block
                    .txdata
                    .iter()
                    .find(|tx| tx.compute_txid() == bridge_out_txid)
                {
                    return Some((
                        block.bip34_block_height().unwrap() as u32,
                        tx.with_inclusion_proof(block),
                    ));
                }
                None
            })
            .unwrap();

        let (checkpoint_height, checkpoint_tx) = blocks
            .iter()
            .filter(|block| {
                let height = block.bip34_block_height().unwrap() as u32;
                initial_header_state.last_verified_block_num < height && height < bridge_out_height
            })
            .rev()
            .find_map(|block| {
                if let Some(tx) = block.txdata.iter().find(|&tx| {
                    data::checkpoint_last_verified_l1_height(tx).is_some_and(|height| {
                        height == initial_header_state.last_verified_block_num
                    })
                }) {
                    return Some((
                        block.bip34_block_height().unwrap() as u32,
                        tx.with_inclusion_proof(block),
                    ));
                }
                None
            })
            .unwrap();

        let headers = blocks
            .iter()
            .filter_map(|block| {
                if initial_header_state.last_verified_block_num
                    < block.bip34_block_height().unwrap() as u32
                {
                    return Some(block.header);
                }
                None
            })
            .collect::<Vec<_>>();

        let bridge_proof_input = BridgeProofInput {
            headers,
            deposit_txid: deposit_txid.to_byte_array(),
            checkpoint: (checkpoint_height, checkpoint_tx),
            bridge_out: (bridge_out_height, bridge_out_tx),
        };

        let strata_bridge_state = StrataBridgeState {
            chain_state: data::chain_state(),
            initial_header_state,
        };

        // write_bridge_proof_input_and_state(&bridge_proof_input, &strata_bridge_state);

        // verifying proof statements
        let res = process_bridge_proof(bridge_proof_input, strata_bridge_state, rollup_params);

        assert!(
            res.is_ok(),
            "should process bridge proof but got: {:?}",
            res.unwrap_err()
        );
    }

    fn _write_bridge_proof_input_and_state(input: &BridgeProofInput, state: &StrataBridgeState) {
        fs::write(
            "inputs/bridge_proof_input.bin",
            bincode::serialize(input).unwrap(),
        )
        .unwrap();
        fs::write(
            "inputs/strata_bridge_state.bin",
            borsh::to_vec(state).unwrap(),
        )
        .unwrap();
    }

    #[test]
    fn test_witness_parsing() {
        const MAGIC: [u8; 6] = [0x6a, 0x24, 0xaa, 0x21, 0xa9, 0xed];
        let _witness_data: Vec<u8> = hex::decode("6a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf94c4fecc7daa249004730440220742c7ba6dc1f2e32dd0b972fb23911824a8db259dda553f42d9f0f9a1f799190022027923dd45a8347b1911710a7c066e29830e127b17402ddbe79e9d667321134ce0100").unwrap();
        let witness_data: Vec<u8> = hex::decode(
            "6a24aa21a9ede2f61c3f71d1defd3fa999dfa36953755c690689799962b48bebd836974e8cf9",
        )
        .unwrap();

        let coinbase_witness_commitment = witness_data
            .strip_prefix(&MAGIC)
            .map(|data| WitnessCommitment::from_slice(data).unwrap());

        assert!(coinbase_witness_commitment.is_some());
    }
}
